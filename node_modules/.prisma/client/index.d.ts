
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model buku
 * 
 */
export type buku = $Result.DefaultSelection<Prisma.$bukuPayload>
/**
 * Model pengarang
 * 
 */
export type pengarang = $Result.DefaultSelection<Prisma.$pengarangPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bukus
 * const bukus = await prisma.buku.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bukus
   * const bukus = await prisma.buku.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.buku`: Exposes CRUD operations for the **buku** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bukus
    * const bukus = await prisma.buku.findMany()
    * ```
    */
  get buku(): Prisma.bukuDelegate<ExtArgs>;

  /**
   * `prisma.pengarang`: Exposes CRUD operations for the **pengarang** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pengarangs
    * const pengarangs = await prisma.pengarang.findMany()
    * ```
    */
  get pengarang(): Prisma.pengarangDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    buku: 'buku',
    pengarang: 'pengarang'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'buku' | 'pengarang'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      buku: {
        payload: Prisma.$bukuPayload<ExtArgs>
        fields: Prisma.bukuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bukuFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bukuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bukuFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bukuPayload>
          }
          findFirst: {
            args: Prisma.bukuFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bukuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bukuFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bukuPayload>
          }
          findMany: {
            args: Prisma.bukuFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bukuPayload>[]
          }
          create: {
            args: Prisma.bukuCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bukuPayload>
          }
          createMany: {
            args: Prisma.bukuCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.bukuDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bukuPayload>
          }
          update: {
            args: Prisma.bukuUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bukuPayload>
          }
          deleteMany: {
            args: Prisma.bukuDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.bukuUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.bukuUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bukuPayload>
          }
          aggregate: {
            args: Prisma.BukuAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBuku>
          }
          groupBy: {
            args: Prisma.bukuGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BukuGroupByOutputType>[]
          }
          count: {
            args: Prisma.bukuCountArgs<ExtArgs>,
            result: $Utils.Optional<BukuCountAggregateOutputType> | number
          }
        }
      }
      pengarang: {
        payload: Prisma.$pengarangPayload<ExtArgs>
        fields: Prisma.pengarangFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pengarangFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pengarangPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pengarangFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pengarangPayload>
          }
          findFirst: {
            args: Prisma.pengarangFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pengarangPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pengarangFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pengarangPayload>
          }
          findMany: {
            args: Prisma.pengarangFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pengarangPayload>[]
          }
          create: {
            args: Prisma.pengarangCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pengarangPayload>
          }
          createMany: {
            args: Prisma.pengarangCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.pengarangDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pengarangPayload>
          }
          update: {
            args: Prisma.pengarangUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pengarangPayload>
          }
          deleteMany: {
            args: Prisma.pengarangDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.pengarangUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.pengarangUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pengarangPayload>
          }
          aggregate: {
            args: Prisma.PengarangAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePengarang>
          }
          groupBy: {
            args: Prisma.pengarangGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PengarangGroupByOutputType>[]
          }
          count: {
            args: Prisma.pengarangCountArgs<ExtArgs>,
            result: $Utils.Optional<PengarangCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PengarangCountOutputType
   */

  export type PengarangCountOutputType = {
    buku: number
  }

  export type PengarangCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buku?: boolean | PengarangCountOutputTypeCountBukuArgs
  }

  // Custom InputTypes
  /**
   * PengarangCountOutputType without action
   */
  export type PengarangCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PengarangCountOutputType
     */
    select?: PengarangCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PengarangCountOutputType without action
   */
  export type PengarangCountOutputTypeCountBukuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bukuWhereInput
  }


  /**
   * Models
   */

  /**
   * Model buku
   */

  export type AggregateBuku = {
    _count: BukuCountAggregateOutputType | null
    _avg: BukuAvgAggregateOutputType | null
    _sum: BukuSumAggregateOutputType | null
    _min: BukuMinAggregateOutputType | null
    _max: BukuMaxAggregateOutputType | null
  }

  export type BukuAvgAggregateOutputType = {
    id_buku: number | null
    tahun_terbit: number | null
    id_pengarang: number | null
  }

  export type BukuSumAggregateOutputType = {
    id_buku: number | null
    tahun_terbit: number | null
    id_pengarang: number | null
  }

  export type BukuMinAggregateOutputType = {
    id_buku: number | null
    judul_buku: string | null
    tahun_terbit: number | null
    genre: string | null
    id_pengarang: number | null
  }

  export type BukuMaxAggregateOutputType = {
    id_buku: number | null
    judul_buku: string | null
    tahun_terbit: number | null
    genre: string | null
    id_pengarang: number | null
  }

  export type BukuCountAggregateOutputType = {
    id_buku: number
    judul_buku: number
    tahun_terbit: number
    genre: number
    id_pengarang: number
    _all: number
  }


  export type BukuAvgAggregateInputType = {
    id_buku?: true
    tahun_terbit?: true
    id_pengarang?: true
  }

  export type BukuSumAggregateInputType = {
    id_buku?: true
    tahun_terbit?: true
    id_pengarang?: true
  }

  export type BukuMinAggregateInputType = {
    id_buku?: true
    judul_buku?: true
    tahun_terbit?: true
    genre?: true
    id_pengarang?: true
  }

  export type BukuMaxAggregateInputType = {
    id_buku?: true
    judul_buku?: true
    tahun_terbit?: true
    genre?: true
    id_pengarang?: true
  }

  export type BukuCountAggregateInputType = {
    id_buku?: true
    judul_buku?: true
    tahun_terbit?: true
    genre?: true
    id_pengarang?: true
    _all?: true
  }

  export type BukuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which buku to aggregate.
     */
    where?: bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bukus to fetch.
     */
    orderBy?: bukuOrderByWithRelationInput | bukuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bukus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bukus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bukus
    **/
    _count?: true | BukuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BukuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BukuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BukuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BukuMaxAggregateInputType
  }

  export type GetBukuAggregateType<T extends BukuAggregateArgs> = {
        [P in keyof T & keyof AggregateBuku]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuku[P]>
      : GetScalarType<T[P], AggregateBuku[P]>
  }




  export type bukuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bukuWhereInput
    orderBy?: bukuOrderByWithAggregationInput | bukuOrderByWithAggregationInput[]
    by: BukuScalarFieldEnum[] | BukuScalarFieldEnum
    having?: bukuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BukuCountAggregateInputType | true
    _avg?: BukuAvgAggregateInputType
    _sum?: BukuSumAggregateInputType
    _min?: BukuMinAggregateInputType
    _max?: BukuMaxAggregateInputType
  }

  export type BukuGroupByOutputType = {
    id_buku: number
    judul_buku: string
    tahun_terbit: number
    genre: string
    id_pengarang: number
    _count: BukuCountAggregateOutputType | null
    _avg: BukuAvgAggregateOutputType | null
    _sum: BukuSumAggregateOutputType | null
    _min: BukuMinAggregateOutputType | null
    _max: BukuMaxAggregateOutputType | null
  }

  type GetBukuGroupByPayload<T extends bukuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BukuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BukuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BukuGroupByOutputType[P]>
            : GetScalarType<T[P], BukuGroupByOutputType[P]>
        }
      >
    >


  export type bukuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_buku?: boolean
    judul_buku?: boolean
    tahun_terbit?: boolean
    genre?: boolean
    id_pengarang?: boolean
    pengarang?: boolean | pengarangDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buku"]>

  export type bukuSelectScalar = {
    id_buku?: boolean
    judul_buku?: boolean
    tahun_terbit?: boolean
    genre?: boolean
    id_pengarang?: boolean
  }


  export type bukuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pengarang?: boolean | pengarangDefaultArgs<ExtArgs>
  }


  export type $bukuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "buku"
    objects: {
      pengarang: Prisma.$pengarangPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_buku: number
      judul_buku: string
      tahun_terbit: number
      genre: string
      id_pengarang: number
    }, ExtArgs["result"]["buku"]>
    composites: {}
  }


  type bukuGetPayload<S extends boolean | null | undefined | bukuDefaultArgs> = $Result.GetResult<Prisma.$bukuPayload, S>

  type bukuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<bukuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BukuCountAggregateInputType | true
    }

  export interface bukuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['buku'], meta: { name: 'buku' } }
    /**
     * Find zero or one Buku that matches the filter.
     * @param {bukuFindUniqueArgs} args - Arguments to find a Buku
     * @example
     * // Get one Buku
     * const buku = await prisma.buku.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bukuFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, bukuFindUniqueArgs<ExtArgs>>
    ): Prisma__bukuClient<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Buku that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {bukuFindUniqueOrThrowArgs} args - Arguments to find a Buku
     * @example
     * // Get one Buku
     * const buku = await prisma.buku.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends bukuFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bukuFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__bukuClient<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Buku that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuFindFirstArgs} args - Arguments to find a Buku
     * @example
     * // Get one Buku
     * const buku = await prisma.buku.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bukuFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, bukuFindFirstArgs<ExtArgs>>
    ): Prisma__bukuClient<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Buku that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuFindFirstOrThrowArgs} args - Arguments to find a Buku
     * @example
     * // Get one Buku
     * const buku = await prisma.buku.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends bukuFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bukuFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__bukuClient<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bukus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bukus
     * const bukus = await prisma.buku.findMany()
     * 
     * // Get first 10 Bukus
     * const bukus = await prisma.buku.findMany({ take: 10 })
     * 
     * // Only select the `id_buku`
     * const bukuWithId_bukuOnly = await prisma.buku.findMany({ select: { id_buku: true } })
     * 
    **/
    findMany<T extends bukuFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bukuFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Buku.
     * @param {bukuCreateArgs} args - Arguments to create a Buku.
     * @example
     * // Create one Buku
     * const Buku = await prisma.buku.create({
     *   data: {
     *     // ... data to create a Buku
     *   }
     * })
     * 
    **/
    create<T extends bukuCreateArgs<ExtArgs>>(
      args: SelectSubset<T, bukuCreateArgs<ExtArgs>>
    ): Prisma__bukuClient<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bukus.
     * @param {bukuCreateManyArgs} args - Arguments to create many Bukus.
     * @example
     * // Create many Bukus
     * const buku = await prisma.buku.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends bukuCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bukuCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Buku.
     * @param {bukuDeleteArgs} args - Arguments to delete one Buku.
     * @example
     * // Delete one Buku
     * const Buku = await prisma.buku.delete({
     *   where: {
     *     // ... filter to delete one Buku
     *   }
     * })
     * 
    **/
    delete<T extends bukuDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, bukuDeleteArgs<ExtArgs>>
    ): Prisma__bukuClient<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Buku.
     * @param {bukuUpdateArgs} args - Arguments to update one Buku.
     * @example
     * // Update one Buku
     * const buku = await prisma.buku.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bukuUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, bukuUpdateArgs<ExtArgs>>
    ): Prisma__bukuClient<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bukus.
     * @param {bukuDeleteManyArgs} args - Arguments to filter Bukus to delete.
     * @example
     * // Delete a few Bukus
     * const { count } = await prisma.buku.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bukuDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bukuDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bukus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bukus
     * const buku = await prisma.buku.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bukuUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, bukuUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Buku.
     * @param {bukuUpsertArgs} args - Arguments to update or create a Buku.
     * @example
     * // Update or create a Buku
     * const buku = await prisma.buku.upsert({
     *   create: {
     *     // ... data to create a Buku
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buku we want to update
     *   }
     * })
    **/
    upsert<T extends bukuUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, bukuUpsertArgs<ExtArgs>>
    ): Prisma__bukuClient<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Bukus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuCountArgs} args - Arguments to filter Bukus to count.
     * @example
     * // Count the number of Bukus
     * const count = await prisma.buku.count({
     *   where: {
     *     // ... the filter for the Bukus we want to count
     *   }
     * })
    **/
    count<T extends bukuCountArgs>(
      args?: Subset<T, bukuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BukuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BukuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BukuAggregateArgs>(args: Subset<T, BukuAggregateArgs>): Prisma.PrismaPromise<GetBukuAggregateType<T>>

    /**
     * Group by Buku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bukuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bukuGroupByArgs['orderBy'] }
        : { orderBy?: bukuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bukuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBukuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the buku model
   */
  readonly fields: bukuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for buku.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bukuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pengarang<T extends pengarangDefaultArgs<ExtArgs> = {}>(args?: Subset<T, pengarangDefaultArgs<ExtArgs>>): Prisma__pengarangClient<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the buku model
   */ 
  interface bukuFieldRefs {
    readonly id_buku: FieldRef<"buku", 'Int'>
    readonly judul_buku: FieldRef<"buku", 'String'>
    readonly tahun_terbit: FieldRef<"buku", 'Int'>
    readonly genre: FieldRef<"buku", 'String'>
    readonly id_pengarang: FieldRef<"buku", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * buku findUnique
   */
  export type bukuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    /**
     * Filter, which buku to fetch.
     */
    where: bukuWhereUniqueInput
  }

  /**
   * buku findUniqueOrThrow
   */
  export type bukuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    /**
     * Filter, which buku to fetch.
     */
    where: bukuWhereUniqueInput
  }

  /**
   * buku findFirst
   */
  export type bukuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    /**
     * Filter, which buku to fetch.
     */
    where?: bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bukus to fetch.
     */
    orderBy?: bukuOrderByWithRelationInput | bukuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bukus.
     */
    cursor?: bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bukus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bukus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bukus.
     */
    distinct?: BukuScalarFieldEnum | BukuScalarFieldEnum[]
  }

  /**
   * buku findFirstOrThrow
   */
  export type bukuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    /**
     * Filter, which buku to fetch.
     */
    where?: bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bukus to fetch.
     */
    orderBy?: bukuOrderByWithRelationInput | bukuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bukus.
     */
    cursor?: bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bukus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bukus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bukus.
     */
    distinct?: BukuScalarFieldEnum | BukuScalarFieldEnum[]
  }

  /**
   * buku findMany
   */
  export type bukuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    /**
     * Filter, which bukus to fetch.
     */
    where?: bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bukus to fetch.
     */
    orderBy?: bukuOrderByWithRelationInput | bukuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bukus.
     */
    cursor?: bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bukus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bukus.
     */
    skip?: number
    distinct?: BukuScalarFieldEnum | BukuScalarFieldEnum[]
  }

  /**
   * buku create
   */
  export type bukuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    /**
     * The data needed to create a buku.
     */
    data: XOR<bukuCreateInput, bukuUncheckedCreateInput>
  }

  /**
   * buku createMany
   */
  export type bukuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bukus.
     */
    data: bukuCreateManyInput | bukuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * buku update
   */
  export type bukuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    /**
     * The data needed to update a buku.
     */
    data: XOR<bukuUpdateInput, bukuUncheckedUpdateInput>
    /**
     * Choose, which buku to update.
     */
    where: bukuWhereUniqueInput
  }

  /**
   * buku updateMany
   */
  export type bukuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bukus.
     */
    data: XOR<bukuUpdateManyMutationInput, bukuUncheckedUpdateManyInput>
    /**
     * Filter which bukus to update
     */
    where?: bukuWhereInput
  }

  /**
   * buku upsert
   */
  export type bukuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    /**
     * The filter to search for the buku to update in case it exists.
     */
    where: bukuWhereUniqueInput
    /**
     * In case the buku found by the `where` argument doesn't exist, create a new buku with this data.
     */
    create: XOR<bukuCreateInput, bukuUncheckedCreateInput>
    /**
     * In case the buku was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bukuUpdateInput, bukuUncheckedUpdateInput>
  }

  /**
   * buku delete
   */
  export type bukuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    /**
     * Filter which buku to delete.
     */
    where: bukuWhereUniqueInput
  }

  /**
   * buku deleteMany
   */
  export type bukuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bukus to delete
     */
    where?: bukuWhereInput
  }

  /**
   * buku without action
   */
  export type bukuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
  }


  /**
   * Model pengarang
   */

  export type AggregatePengarang = {
    _count: PengarangCountAggregateOutputType | null
    _avg: PengarangAvgAggregateOutputType | null
    _sum: PengarangSumAggregateOutputType | null
    _min: PengarangMinAggregateOutputType | null
    _max: PengarangMaxAggregateOutputType | null
  }

  export type PengarangAvgAggregateOutputType = {
    id_pengarang: number | null
  }

  export type PengarangSumAggregateOutputType = {
    id_pengarang: number | null
  }

  export type PengarangMinAggregateOutputType = {
    id_pengarang: number | null
    nama_pengarang: string | null
    tgl_lahir: Date | null
    negara: string | null
  }

  export type PengarangMaxAggregateOutputType = {
    id_pengarang: number | null
    nama_pengarang: string | null
    tgl_lahir: Date | null
    negara: string | null
  }

  export type PengarangCountAggregateOutputType = {
    id_pengarang: number
    nama_pengarang: number
    tgl_lahir: number
    negara: number
    _all: number
  }


  export type PengarangAvgAggregateInputType = {
    id_pengarang?: true
  }

  export type PengarangSumAggregateInputType = {
    id_pengarang?: true
  }

  export type PengarangMinAggregateInputType = {
    id_pengarang?: true
    nama_pengarang?: true
    tgl_lahir?: true
    negara?: true
  }

  export type PengarangMaxAggregateInputType = {
    id_pengarang?: true
    nama_pengarang?: true
    tgl_lahir?: true
    negara?: true
  }

  export type PengarangCountAggregateInputType = {
    id_pengarang?: true
    nama_pengarang?: true
    tgl_lahir?: true
    negara?: true
    _all?: true
  }

  export type PengarangAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pengarang to aggregate.
     */
    where?: pengarangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pengarangs to fetch.
     */
    orderBy?: pengarangOrderByWithRelationInput | pengarangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pengarangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pengarangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pengarangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pengarangs
    **/
    _count?: true | PengarangCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PengarangAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PengarangSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PengarangMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PengarangMaxAggregateInputType
  }

  export type GetPengarangAggregateType<T extends PengarangAggregateArgs> = {
        [P in keyof T & keyof AggregatePengarang]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePengarang[P]>
      : GetScalarType<T[P], AggregatePengarang[P]>
  }




  export type pengarangGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pengarangWhereInput
    orderBy?: pengarangOrderByWithAggregationInput | pengarangOrderByWithAggregationInput[]
    by: PengarangScalarFieldEnum[] | PengarangScalarFieldEnum
    having?: pengarangScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PengarangCountAggregateInputType | true
    _avg?: PengarangAvgAggregateInputType
    _sum?: PengarangSumAggregateInputType
    _min?: PengarangMinAggregateInputType
    _max?: PengarangMaxAggregateInputType
  }

  export type PengarangGroupByOutputType = {
    id_pengarang: number
    nama_pengarang: string
    tgl_lahir: Date
    negara: string
    _count: PengarangCountAggregateOutputType | null
    _avg: PengarangAvgAggregateOutputType | null
    _sum: PengarangSumAggregateOutputType | null
    _min: PengarangMinAggregateOutputType | null
    _max: PengarangMaxAggregateOutputType | null
  }

  type GetPengarangGroupByPayload<T extends pengarangGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PengarangGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PengarangGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PengarangGroupByOutputType[P]>
            : GetScalarType<T[P], PengarangGroupByOutputType[P]>
        }
      >
    >


  export type pengarangSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_pengarang?: boolean
    nama_pengarang?: boolean
    tgl_lahir?: boolean
    negara?: boolean
    buku?: boolean | pengarang$bukuArgs<ExtArgs>
    _count?: boolean | PengarangCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pengarang"]>

  export type pengarangSelectScalar = {
    id_pengarang?: boolean
    nama_pengarang?: boolean
    tgl_lahir?: boolean
    negara?: boolean
  }


  export type pengarangInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buku?: boolean | pengarang$bukuArgs<ExtArgs>
    _count?: boolean | PengarangCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $pengarangPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "pengarang"
    objects: {
      buku: Prisma.$bukuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_pengarang: number
      nama_pengarang: string
      tgl_lahir: Date
      negara: string
    }, ExtArgs["result"]["pengarang"]>
    composites: {}
  }


  type pengarangGetPayload<S extends boolean | null | undefined | pengarangDefaultArgs> = $Result.GetResult<Prisma.$pengarangPayload, S>

  type pengarangCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<pengarangFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PengarangCountAggregateInputType | true
    }

  export interface pengarangDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pengarang'], meta: { name: 'pengarang' } }
    /**
     * Find zero or one Pengarang that matches the filter.
     * @param {pengarangFindUniqueArgs} args - Arguments to find a Pengarang
     * @example
     * // Get one Pengarang
     * const pengarang = await prisma.pengarang.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pengarangFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, pengarangFindUniqueArgs<ExtArgs>>
    ): Prisma__pengarangClient<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pengarang that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {pengarangFindUniqueOrThrowArgs} args - Arguments to find a Pengarang
     * @example
     * // Get one Pengarang
     * const pengarang = await prisma.pengarang.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends pengarangFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pengarangFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__pengarangClient<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pengarang that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pengarangFindFirstArgs} args - Arguments to find a Pengarang
     * @example
     * // Get one Pengarang
     * const pengarang = await prisma.pengarang.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pengarangFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, pengarangFindFirstArgs<ExtArgs>>
    ): Prisma__pengarangClient<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pengarang that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pengarangFindFirstOrThrowArgs} args - Arguments to find a Pengarang
     * @example
     * // Get one Pengarang
     * const pengarang = await prisma.pengarang.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends pengarangFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pengarangFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__pengarangClient<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pengarangs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pengarangFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pengarangs
     * const pengarangs = await prisma.pengarang.findMany()
     * 
     * // Get first 10 Pengarangs
     * const pengarangs = await prisma.pengarang.findMany({ take: 10 })
     * 
     * // Only select the `id_pengarang`
     * const pengarangWithId_pengarangOnly = await prisma.pengarang.findMany({ select: { id_pengarang: true } })
     * 
    **/
    findMany<T extends pengarangFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pengarangFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pengarang.
     * @param {pengarangCreateArgs} args - Arguments to create a Pengarang.
     * @example
     * // Create one Pengarang
     * const Pengarang = await prisma.pengarang.create({
     *   data: {
     *     // ... data to create a Pengarang
     *   }
     * })
     * 
    **/
    create<T extends pengarangCreateArgs<ExtArgs>>(
      args: SelectSubset<T, pengarangCreateArgs<ExtArgs>>
    ): Prisma__pengarangClient<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pengarangs.
     * @param {pengarangCreateManyArgs} args - Arguments to create many Pengarangs.
     * @example
     * // Create many Pengarangs
     * const pengarang = await prisma.pengarang.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends pengarangCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pengarangCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pengarang.
     * @param {pengarangDeleteArgs} args - Arguments to delete one Pengarang.
     * @example
     * // Delete one Pengarang
     * const Pengarang = await prisma.pengarang.delete({
     *   where: {
     *     // ... filter to delete one Pengarang
     *   }
     * })
     * 
    **/
    delete<T extends pengarangDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, pengarangDeleteArgs<ExtArgs>>
    ): Prisma__pengarangClient<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pengarang.
     * @param {pengarangUpdateArgs} args - Arguments to update one Pengarang.
     * @example
     * // Update one Pengarang
     * const pengarang = await prisma.pengarang.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pengarangUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, pengarangUpdateArgs<ExtArgs>>
    ): Prisma__pengarangClient<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pengarangs.
     * @param {pengarangDeleteManyArgs} args - Arguments to filter Pengarangs to delete.
     * @example
     * // Delete a few Pengarangs
     * const { count } = await prisma.pengarang.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pengarangDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pengarangDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pengarangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pengarangUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pengarangs
     * const pengarang = await prisma.pengarang.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pengarangUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, pengarangUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pengarang.
     * @param {pengarangUpsertArgs} args - Arguments to update or create a Pengarang.
     * @example
     * // Update or create a Pengarang
     * const pengarang = await prisma.pengarang.upsert({
     *   create: {
     *     // ... data to create a Pengarang
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pengarang we want to update
     *   }
     * })
    **/
    upsert<T extends pengarangUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, pengarangUpsertArgs<ExtArgs>>
    ): Prisma__pengarangClient<$Result.GetResult<Prisma.$pengarangPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pengarangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pengarangCountArgs} args - Arguments to filter Pengarangs to count.
     * @example
     * // Count the number of Pengarangs
     * const count = await prisma.pengarang.count({
     *   where: {
     *     // ... the filter for the Pengarangs we want to count
     *   }
     * })
    **/
    count<T extends pengarangCountArgs>(
      args?: Subset<T, pengarangCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PengarangCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pengarang.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PengarangAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PengarangAggregateArgs>(args: Subset<T, PengarangAggregateArgs>): Prisma.PrismaPromise<GetPengarangAggregateType<T>>

    /**
     * Group by Pengarang.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pengarangGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pengarangGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pengarangGroupByArgs['orderBy'] }
        : { orderBy?: pengarangGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pengarangGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPengarangGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pengarang model
   */
  readonly fields: pengarangFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pengarang.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pengarangClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    buku<T extends pengarang$bukuArgs<ExtArgs> = {}>(args?: Subset<T, pengarang$bukuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bukuPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the pengarang model
   */ 
  interface pengarangFieldRefs {
    readonly id_pengarang: FieldRef<"pengarang", 'Int'>
    readonly nama_pengarang: FieldRef<"pengarang", 'String'>
    readonly tgl_lahir: FieldRef<"pengarang", 'DateTime'>
    readonly negara: FieldRef<"pengarang", 'String'>
  }
    

  // Custom InputTypes
  /**
   * pengarang findUnique
   */
  export type pengarangFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
    /**
     * Filter, which pengarang to fetch.
     */
    where: pengarangWhereUniqueInput
  }

  /**
   * pengarang findUniqueOrThrow
   */
  export type pengarangFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
    /**
     * Filter, which pengarang to fetch.
     */
    where: pengarangWhereUniqueInput
  }

  /**
   * pengarang findFirst
   */
  export type pengarangFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
    /**
     * Filter, which pengarang to fetch.
     */
    where?: pengarangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pengarangs to fetch.
     */
    orderBy?: pengarangOrderByWithRelationInput | pengarangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pengarangs.
     */
    cursor?: pengarangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pengarangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pengarangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pengarangs.
     */
    distinct?: PengarangScalarFieldEnum | PengarangScalarFieldEnum[]
  }

  /**
   * pengarang findFirstOrThrow
   */
  export type pengarangFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
    /**
     * Filter, which pengarang to fetch.
     */
    where?: pengarangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pengarangs to fetch.
     */
    orderBy?: pengarangOrderByWithRelationInput | pengarangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pengarangs.
     */
    cursor?: pengarangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pengarangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pengarangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pengarangs.
     */
    distinct?: PengarangScalarFieldEnum | PengarangScalarFieldEnum[]
  }

  /**
   * pengarang findMany
   */
  export type pengarangFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
    /**
     * Filter, which pengarangs to fetch.
     */
    where?: pengarangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pengarangs to fetch.
     */
    orderBy?: pengarangOrderByWithRelationInput | pengarangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pengarangs.
     */
    cursor?: pengarangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pengarangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pengarangs.
     */
    skip?: number
    distinct?: PengarangScalarFieldEnum | PengarangScalarFieldEnum[]
  }

  /**
   * pengarang create
   */
  export type pengarangCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
    /**
     * The data needed to create a pengarang.
     */
    data: XOR<pengarangCreateInput, pengarangUncheckedCreateInput>
  }

  /**
   * pengarang createMany
   */
  export type pengarangCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pengarangs.
     */
    data: pengarangCreateManyInput | pengarangCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pengarang update
   */
  export type pengarangUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
    /**
     * The data needed to update a pengarang.
     */
    data: XOR<pengarangUpdateInput, pengarangUncheckedUpdateInput>
    /**
     * Choose, which pengarang to update.
     */
    where: pengarangWhereUniqueInput
  }

  /**
   * pengarang updateMany
   */
  export type pengarangUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pengarangs.
     */
    data: XOR<pengarangUpdateManyMutationInput, pengarangUncheckedUpdateManyInput>
    /**
     * Filter which pengarangs to update
     */
    where?: pengarangWhereInput
  }

  /**
   * pengarang upsert
   */
  export type pengarangUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
    /**
     * The filter to search for the pengarang to update in case it exists.
     */
    where: pengarangWhereUniqueInput
    /**
     * In case the pengarang found by the `where` argument doesn't exist, create a new pengarang with this data.
     */
    create: XOR<pengarangCreateInput, pengarangUncheckedCreateInput>
    /**
     * In case the pengarang was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pengarangUpdateInput, pengarangUncheckedUpdateInput>
  }

  /**
   * pengarang delete
   */
  export type pengarangDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
    /**
     * Filter which pengarang to delete.
     */
    where: pengarangWhereUniqueInput
  }

  /**
   * pengarang deleteMany
   */
  export type pengarangDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pengarangs to delete
     */
    where?: pengarangWhereInput
  }

  /**
   * pengarang.buku
   */
  export type pengarang$bukuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buku
     */
    select?: bukuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bukuInclude<ExtArgs> | null
    where?: bukuWhereInput
    orderBy?: bukuOrderByWithRelationInput | bukuOrderByWithRelationInput[]
    cursor?: bukuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BukuScalarFieldEnum | BukuScalarFieldEnum[]
  }

  /**
   * pengarang without action
   */
  export type pengarangDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pengarang
     */
    select?: pengarangSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pengarangInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BukuScalarFieldEnum: {
    id_buku: 'id_buku',
    judul_buku: 'judul_buku',
    tahun_terbit: 'tahun_terbit',
    genre: 'genre',
    id_pengarang: 'id_pengarang'
  };

  export type BukuScalarFieldEnum = (typeof BukuScalarFieldEnum)[keyof typeof BukuScalarFieldEnum]


  export const PengarangScalarFieldEnum: {
    id_pengarang: 'id_pengarang',
    nama_pengarang: 'nama_pengarang',
    tgl_lahir: 'tgl_lahir',
    negara: 'negara'
  };

  export type PengarangScalarFieldEnum = (typeof PengarangScalarFieldEnum)[keyof typeof PengarangScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type bukuWhereInput = {
    AND?: bukuWhereInput | bukuWhereInput[]
    OR?: bukuWhereInput[]
    NOT?: bukuWhereInput | bukuWhereInput[]
    id_buku?: IntFilter<"buku"> | number
    judul_buku?: StringFilter<"buku"> | string
    tahun_terbit?: IntFilter<"buku"> | number
    genre?: StringFilter<"buku"> | string
    id_pengarang?: IntFilter<"buku"> | number
    pengarang?: XOR<PengarangRelationFilter, pengarangWhereInput>
  }

  export type bukuOrderByWithRelationInput = {
    id_buku?: SortOrder
    judul_buku?: SortOrder
    tahun_terbit?: SortOrder
    genre?: SortOrder
    id_pengarang?: SortOrder
    pengarang?: pengarangOrderByWithRelationInput
  }

  export type bukuWhereUniqueInput = Prisma.AtLeast<{
    id_buku?: number
    AND?: bukuWhereInput | bukuWhereInput[]
    OR?: bukuWhereInput[]
    NOT?: bukuWhereInput | bukuWhereInput[]
    judul_buku?: StringFilter<"buku"> | string
    tahun_terbit?: IntFilter<"buku"> | number
    genre?: StringFilter<"buku"> | string
    id_pengarang?: IntFilter<"buku"> | number
    pengarang?: XOR<PengarangRelationFilter, pengarangWhereInput>
  }, "id_buku">

  export type bukuOrderByWithAggregationInput = {
    id_buku?: SortOrder
    judul_buku?: SortOrder
    tahun_terbit?: SortOrder
    genre?: SortOrder
    id_pengarang?: SortOrder
    _count?: bukuCountOrderByAggregateInput
    _avg?: bukuAvgOrderByAggregateInput
    _max?: bukuMaxOrderByAggregateInput
    _min?: bukuMinOrderByAggregateInput
    _sum?: bukuSumOrderByAggregateInput
  }

  export type bukuScalarWhereWithAggregatesInput = {
    AND?: bukuScalarWhereWithAggregatesInput | bukuScalarWhereWithAggregatesInput[]
    OR?: bukuScalarWhereWithAggregatesInput[]
    NOT?: bukuScalarWhereWithAggregatesInput | bukuScalarWhereWithAggregatesInput[]
    id_buku?: IntWithAggregatesFilter<"buku"> | number
    judul_buku?: StringWithAggregatesFilter<"buku"> | string
    tahun_terbit?: IntWithAggregatesFilter<"buku"> | number
    genre?: StringWithAggregatesFilter<"buku"> | string
    id_pengarang?: IntWithAggregatesFilter<"buku"> | number
  }

  export type pengarangWhereInput = {
    AND?: pengarangWhereInput | pengarangWhereInput[]
    OR?: pengarangWhereInput[]
    NOT?: pengarangWhereInput | pengarangWhereInput[]
    id_pengarang?: IntFilter<"pengarang"> | number
    nama_pengarang?: StringFilter<"pengarang"> | string
    tgl_lahir?: DateTimeFilter<"pengarang"> | Date | string
    negara?: StringFilter<"pengarang"> | string
    buku?: BukuListRelationFilter
  }

  export type pengarangOrderByWithRelationInput = {
    id_pengarang?: SortOrder
    nama_pengarang?: SortOrder
    tgl_lahir?: SortOrder
    negara?: SortOrder
    buku?: bukuOrderByRelationAggregateInput
  }

  export type pengarangWhereUniqueInput = Prisma.AtLeast<{
    id_pengarang?: number
    AND?: pengarangWhereInput | pengarangWhereInput[]
    OR?: pengarangWhereInput[]
    NOT?: pengarangWhereInput | pengarangWhereInput[]
    nama_pengarang?: StringFilter<"pengarang"> | string
    tgl_lahir?: DateTimeFilter<"pengarang"> | Date | string
    negara?: StringFilter<"pengarang"> | string
    buku?: BukuListRelationFilter
  }, "id_pengarang">

  export type pengarangOrderByWithAggregationInput = {
    id_pengarang?: SortOrder
    nama_pengarang?: SortOrder
    tgl_lahir?: SortOrder
    negara?: SortOrder
    _count?: pengarangCountOrderByAggregateInput
    _avg?: pengarangAvgOrderByAggregateInput
    _max?: pengarangMaxOrderByAggregateInput
    _min?: pengarangMinOrderByAggregateInput
    _sum?: pengarangSumOrderByAggregateInput
  }

  export type pengarangScalarWhereWithAggregatesInput = {
    AND?: pengarangScalarWhereWithAggregatesInput | pengarangScalarWhereWithAggregatesInput[]
    OR?: pengarangScalarWhereWithAggregatesInput[]
    NOT?: pengarangScalarWhereWithAggregatesInput | pengarangScalarWhereWithAggregatesInput[]
    id_pengarang?: IntWithAggregatesFilter<"pengarang"> | number
    nama_pengarang?: StringWithAggregatesFilter<"pengarang"> | string
    tgl_lahir?: DateTimeWithAggregatesFilter<"pengarang"> | Date | string
    negara?: StringWithAggregatesFilter<"pengarang"> | string
  }

  export type bukuCreateInput = {
    judul_buku: string
    tahun_terbit: number
    genre: string
    pengarang: pengarangCreateNestedOneWithoutBukuInput
  }

  export type bukuUncheckedCreateInput = {
    id_buku?: number
    judul_buku: string
    tahun_terbit: number
    genre: string
    id_pengarang: number
  }

  export type bukuUpdateInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    pengarang?: pengarangUpdateOneRequiredWithoutBukuNestedInput
  }

  export type bukuUncheckedUpdateInput = {
    id_buku?: IntFieldUpdateOperationsInput | number
    judul_buku?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    id_pengarang?: IntFieldUpdateOperationsInput | number
  }

  export type bukuCreateManyInput = {
    id_buku?: number
    judul_buku: string
    tahun_terbit: number
    genre: string
    id_pengarang: number
  }

  export type bukuUpdateManyMutationInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type bukuUncheckedUpdateManyInput = {
    id_buku?: IntFieldUpdateOperationsInput | number
    judul_buku?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    id_pengarang?: IntFieldUpdateOperationsInput | number
  }

  export type pengarangCreateInput = {
    nama_pengarang: string
    tgl_lahir: Date | string
    negara: string
    buku?: bukuCreateNestedManyWithoutPengarangInput
  }

  export type pengarangUncheckedCreateInput = {
    id_pengarang?: number
    nama_pengarang: string
    tgl_lahir: Date | string
    negara: string
    buku?: bukuUncheckedCreateNestedManyWithoutPengarangInput
  }

  export type pengarangUpdateInput = {
    nama_pengarang?: StringFieldUpdateOperationsInput | string
    tgl_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    negara?: StringFieldUpdateOperationsInput | string
    buku?: bukuUpdateManyWithoutPengarangNestedInput
  }

  export type pengarangUncheckedUpdateInput = {
    id_pengarang?: IntFieldUpdateOperationsInput | number
    nama_pengarang?: StringFieldUpdateOperationsInput | string
    tgl_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    negara?: StringFieldUpdateOperationsInput | string
    buku?: bukuUncheckedUpdateManyWithoutPengarangNestedInput
  }

  export type pengarangCreateManyInput = {
    id_pengarang?: number
    nama_pengarang: string
    tgl_lahir: Date | string
    negara: string
  }

  export type pengarangUpdateManyMutationInput = {
    nama_pengarang?: StringFieldUpdateOperationsInput | string
    tgl_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    negara?: StringFieldUpdateOperationsInput | string
  }

  export type pengarangUncheckedUpdateManyInput = {
    id_pengarang?: IntFieldUpdateOperationsInput | number
    nama_pengarang?: StringFieldUpdateOperationsInput | string
    tgl_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    negara?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PengarangRelationFilter = {
    is?: pengarangWhereInput
    isNot?: pengarangWhereInput
  }

  export type bukuCountOrderByAggregateInput = {
    id_buku?: SortOrder
    judul_buku?: SortOrder
    tahun_terbit?: SortOrder
    genre?: SortOrder
    id_pengarang?: SortOrder
  }

  export type bukuAvgOrderByAggregateInput = {
    id_buku?: SortOrder
    tahun_terbit?: SortOrder
    id_pengarang?: SortOrder
  }

  export type bukuMaxOrderByAggregateInput = {
    id_buku?: SortOrder
    judul_buku?: SortOrder
    tahun_terbit?: SortOrder
    genre?: SortOrder
    id_pengarang?: SortOrder
  }

  export type bukuMinOrderByAggregateInput = {
    id_buku?: SortOrder
    judul_buku?: SortOrder
    tahun_terbit?: SortOrder
    genre?: SortOrder
    id_pengarang?: SortOrder
  }

  export type bukuSumOrderByAggregateInput = {
    id_buku?: SortOrder
    tahun_terbit?: SortOrder
    id_pengarang?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BukuListRelationFilter = {
    every?: bukuWhereInput
    some?: bukuWhereInput
    none?: bukuWhereInput
  }

  export type bukuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type pengarangCountOrderByAggregateInput = {
    id_pengarang?: SortOrder
    nama_pengarang?: SortOrder
    tgl_lahir?: SortOrder
    negara?: SortOrder
  }

  export type pengarangAvgOrderByAggregateInput = {
    id_pengarang?: SortOrder
  }

  export type pengarangMaxOrderByAggregateInput = {
    id_pengarang?: SortOrder
    nama_pengarang?: SortOrder
    tgl_lahir?: SortOrder
    negara?: SortOrder
  }

  export type pengarangMinOrderByAggregateInput = {
    id_pengarang?: SortOrder
    nama_pengarang?: SortOrder
    tgl_lahir?: SortOrder
    negara?: SortOrder
  }

  export type pengarangSumOrderByAggregateInput = {
    id_pengarang?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type pengarangCreateNestedOneWithoutBukuInput = {
    create?: XOR<pengarangCreateWithoutBukuInput, pengarangUncheckedCreateWithoutBukuInput>
    connectOrCreate?: pengarangCreateOrConnectWithoutBukuInput
    connect?: pengarangWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type pengarangUpdateOneRequiredWithoutBukuNestedInput = {
    create?: XOR<pengarangCreateWithoutBukuInput, pengarangUncheckedCreateWithoutBukuInput>
    connectOrCreate?: pengarangCreateOrConnectWithoutBukuInput
    upsert?: pengarangUpsertWithoutBukuInput
    connect?: pengarangWhereUniqueInput
    update?: XOR<XOR<pengarangUpdateToOneWithWhereWithoutBukuInput, pengarangUpdateWithoutBukuInput>, pengarangUncheckedUpdateWithoutBukuInput>
  }

  export type bukuCreateNestedManyWithoutPengarangInput = {
    create?: XOR<bukuCreateWithoutPengarangInput, bukuUncheckedCreateWithoutPengarangInput> | bukuCreateWithoutPengarangInput[] | bukuUncheckedCreateWithoutPengarangInput[]
    connectOrCreate?: bukuCreateOrConnectWithoutPengarangInput | bukuCreateOrConnectWithoutPengarangInput[]
    createMany?: bukuCreateManyPengarangInputEnvelope
    connect?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
  }

  export type bukuUncheckedCreateNestedManyWithoutPengarangInput = {
    create?: XOR<bukuCreateWithoutPengarangInput, bukuUncheckedCreateWithoutPengarangInput> | bukuCreateWithoutPengarangInput[] | bukuUncheckedCreateWithoutPengarangInput[]
    connectOrCreate?: bukuCreateOrConnectWithoutPengarangInput | bukuCreateOrConnectWithoutPengarangInput[]
    createMany?: bukuCreateManyPengarangInputEnvelope
    connect?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type bukuUpdateManyWithoutPengarangNestedInput = {
    create?: XOR<bukuCreateWithoutPengarangInput, bukuUncheckedCreateWithoutPengarangInput> | bukuCreateWithoutPengarangInput[] | bukuUncheckedCreateWithoutPengarangInput[]
    connectOrCreate?: bukuCreateOrConnectWithoutPengarangInput | bukuCreateOrConnectWithoutPengarangInput[]
    upsert?: bukuUpsertWithWhereUniqueWithoutPengarangInput | bukuUpsertWithWhereUniqueWithoutPengarangInput[]
    createMany?: bukuCreateManyPengarangInputEnvelope
    set?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
    disconnect?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
    delete?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
    connect?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
    update?: bukuUpdateWithWhereUniqueWithoutPengarangInput | bukuUpdateWithWhereUniqueWithoutPengarangInput[]
    updateMany?: bukuUpdateManyWithWhereWithoutPengarangInput | bukuUpdateManyWithWhereWithoutPengarangInput[]
    deleteMany?: bukuScalarWhereInput | bukuScalarWhereInput[]
  }

  export type bukuUncheckedUpdateManyWithoutPengarangNestedInput = {
    create?: XOR<bukuCreateWithoutPengarangInput, bukuUncheckedCreateWithoutPengarangInput> | bukuCreateWithoutPengarangInput[] | bukuUncheckedCreateWithoutPengarangInput[]
    connectOrCreate?: bukuCreateOrConnectWithoutPengarangInput | bukuCreateOrConnectWithoutPengarangInput[]
    upsert?: bukuUpsertWithWhereUniqueWithoutPengarangInput | bukuUpsertWithWhereUniqueWithoutPengarangInput[]
    createMany?: bukuCreateManyPengarangInputEnvelope
    set?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
    disconnect?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
    delete?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
    connect?: bukuWhereUniqueInput | bukuWhereUniqueInput[]
    update?: bukuUpdateWithWhereUniqueWithoutPengarangInput | bukuUpdateWithWhereUniqueWithoutPengarangInput[]
    updateMany?: bukuUpdateManyWithWhereWithoutPengarangInput | bukuUpdateManyWithWhereWithoutPengarangInput[]
    deleteMany?: bukuScalarWhereInput | bukuScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type pengarangCreateWithoutBukuInput = {
    nama_pengarang: string
    tgl_lahir: Date | string
    negara: string
  }

  export type pengarangUncheckedCreateWithoutBukuInput = {
    id_pengarang?: number
    nama_pengarang: string
    tgl_lahir: Date | string
    negara: string
  }

  export type pengarangCreateOrConnectWithoutBukuInput = {
    where: pengarangWhereUniqueInput
    create: XOR<pengarangCreateWithoutBukuInput, pengarangUncheckedCreateWithoutBukuInput>
  }

  export type pengarangUpsertWithoutBukuInput = {
    update: XOR<pengarangUpdateWithoutBukuInput, pengarangUncheckedUpdateWithoutBukuInput>
    create: XOR<pengarangCreateWithoutBukuInput, pengarangUncheckedCreateWithoutBukuInput>
    where?: pengarangWhereInput
  }

  export type pengarangUpdateToOneWithWhereWithoutBukuInput = {
    where?: pengarangWhereInput
    data: XOR<pengarangUpdateWithoutBukuInput, pengarangUncheckedUpdateWithoutBukuInput>
  }

  export type pengarangUpdateWithoutBukuInput = {
    nama_pengarang?: StringFieldUpdateOperationsInput | string
    tgl_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    negara?: StringFieldUpdateOperationsInput | string
  }

  export type pengarangUncheckedUpdateWithoutBukuInput = {
    id_pengarang?: IntFieldUpdateOperationsInput | number
    nama_pengarang?: StringFieldUpdateOperationsInput | string
    tgl_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    negara?: StringFieldUpdateOperationsInput | string
  }

  export type bukuCreateWithoutPengarangInput = {
    judul_buku: string
    tahun_terbit: number
    genre: string
  }

  export type bukuUncheckedCreateWithoutPengarangInput = {
    id_buku?: number
    judul_buku: string
    tahun_terbit: number
    genre: string
  }

  export type bukuCreateOrConnectWithoutPengarangInput = {
    where: bukuWhereUniqueInput
    create: XOR<bukuCreateWithoutPengarangInput, bukuUncheckedCreateWithoutPengarangInput>
  }

  export type bukuCreateManyPengarangInputEnvelope = {
    data: bukuCreateManyPengarangInput | bukuCreateManyPengarangInput[]
    skipDuplicates?: boolean
  }

  export type bukuUpsertWithWhereUniqueWithoutPengarangInput = {
    where: bukuWhereUniqueInput
    update: XOR<bukuUpdateWithoutPengarangInput, bukuUncheckedUpdateWithoutPengarangInput>
    create: XOR<bukuCreateWithoutPengarangInput, bukuUncheckedCreateWithoutPengarangInput>
  }

  export type bukuUpdateWithWhereUniqueWithoutPengarangInput = {
    where: bukuWhereUniqueInput
    data: XOR<bukuUpdateWithoutPengarangInput, bukuUncheckedUpdateWithoutPengarangInput>
  }

  export type bukuUpdateManyWithWhereWithoutPengarangInput = {
    where: bukuScalarWhereInput
    data: XOR<bukuUpdateManyMutationInput, bukuUncheckedUpdateManyWithoutPengarangInput>
  }

  export type bukuScalarWhereInput = {
    AND?: bukuScalarWhereInput | bukuScalarWhereInput[]
    OR?: bukuScalarWhereInput[]
    NOT?: bukuScalarWhereInput | bukuScalarWhereInput[]
    id_buku?: IntFilter<"buku"> | number
    judul_buku?: StringFilter<"buku"> | string
    tahun_terbit?: IntFilter<"buku"> | number
    genre?: StringFilter<"buku"> | string
    id_pengarang?: IntFilter<"buku"> | number
  }

  export type bukuCreateManyPengarangInput = {
    id_buku?: number
    judul_buku: string
    tahun_terbit: number
    genre: string
  }

  export type bukuUpdateWithoutPengarangInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type bukuUncheckedUpdateWithoutPengarangInput = {
    id_buku?: IntFieldUpdateOperationsInput | number
    judul_buku?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type bukuUncheckedUpdateManyWithoutPengarangInput = {
    id_buku?: IntFieldUpdateOperationsInput | number
    judul_buku?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PengarangCountOutputTypeDefaultArgs instead
     */
    export type PengarangCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PengarangCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use bukuDefaultArgs instead
     */
    export type bukuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = bukuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use pengarangDefaultArgs instead
     */
    export type pengarangArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = pengarangDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}